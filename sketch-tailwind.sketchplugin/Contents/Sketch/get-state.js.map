{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./node_modules/@skpm/fs/index.js","webpack://exports/./src/get-state.js","webpack://exports/./src/helpers.js","webpack://exports/external \"buffer\"","webpack://exports/external \"sketch\"","webpack://exports/external \"util\""],"names":["doc","sketch","fromNative","context","document","layers","getSharedLayerStyles","textLayers","getSharedTextStyles","state","getColors","colors","Object","values","forEach","$layer","i","color","name","getLastPart","hex","style","fills","substr","getFontFamilies","names","map","sketchObject","textStyle","attributes","NSFont","familyName","fontFamilies","String","value","replace","toLowerCase","cleanFamilies","e","final","indexOf","filter","getFontSizes","fontSizes","sizes","pointSize","$size","lastIndexOf"],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA,aAAa,mBAAO,CAAC,sBAAQ;;AAE7B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sDAAsD;AACrF,mCAAmC,0DAA0D;AAC7F,6BAA6B,mDAAmD;AAChF,wBAAwB,eAAe;AACvC,wBAAwB,iDAAiD;AACzE,0BAA0B,gDAAgD;AAC1E,gCAAgC,sDAAsD;AACtF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;A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","file":"get-state.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/get-state.js\");\n","// TODO: async. Should probably be done with NSFileHandle and some notifications\n// TODO: file descriptor. Needs to be done with NSFileHandle\nvar Buffer = require('buffer').Buffer\n\nvar ERRORS = {\n  'EPERM': {\n    message: 'operation not permitted',\n    errno: -1\n  },\n  'ENOENT': {\n    message: 'no such file or directory',\n    errno: -2\n  },\n  'EACCES': {\n    message: 'permission denied',\n    errno: -13\n  },\n  'ENOTDIR': {\n    message: 'not a directory',\n    errno: -20\n  },\n  'EISDIR': {\n    message: 'illegal operation on a directory',\n    errno: -21\n  }\n}\n\nfunction fsError(code, options) {\n  var error = new Error(\n    code + ': '\n    + ERRORS[code].message + ', '\n    + (options.syscall || '')\n    + (options.path ? ' \\'' + options.path + '\\'' : '')\n  )\n\n  Object.keys(options).forEach(function (k) {\n    error[k] = options[k]\n  })\n\n  error.code = code\n  error.errno = ERRORS[code].errno\n\n  return error\n}\n\nfunction fsErrorForPath(path, shouldBeDir, err, syscall) {\n  var fileManager = NSFileManager.defaultManager()\n  var doesExist = fileManager.fileExistsAtPath(path)\n  if (!doesExist) {\n    return fsError('ENOENT', {\n      path: path,\n      syscall: syscall || 'open'\n    })\n  }\n  var isReadable = fileManager.isReadableFileAtPath(path)\n  if (!isReadable) {\n    return fsError('EACCES', {\n      path: path,\n      syscall: syscall || 'open'\n    })\n  }\n  if (typeof shouldBeDir !== 'undefined') {\n    var isDirectory = module.exports.lstatSync(path).isDirectory()\n    if (isDirectory && !shouldBeDir) {\n      return fsError('EISDIR', {\n        path: path,\n        syscall: syscall || 'read'\n      })\n    } else if (!isDirectory && shouldBeDir) {\n      return fsError('ENOTDIR', {\n        path: path,\n        syscall: syscall || 'read'\n      })\n    }\n  }\n  return new Error(err || ('Unknown error while manipulating ' + path))\n}\n\nfunction encodingFromOptions(options, defaultValue) {\n  return options && options.encoding\n    ? String(options.encoding)\n    : (\n      options\n        ? String(options)\n        : defaultValue\n    )\n}\n\nmodule.exports.constants = {\n  F_OK: 0,\n  R_OK: 4,\n  W_OK: 2,\n  X_OK: 1\n}\n\nmodule.exports.accessSync = function(path, mode) {\n  mode = mode | 0\n  var fileManager = NSFileManager.defaultManager()\n\n  switch (mode) {\n    case 0:\n      canAccess = module.exports.existsSync(path)\n      break\n    case 1:\n      canAccess = Boolean(Number(fileManager.isExecutableFileAtPath(path)))\n      break\n    case 2:\n      canAccess = Boolean(Number(fileManager.isWritableFileAtPath(path)))\n      break\n    case 3:\n      canAccess = Boolean(Number(fileManager.isExecutableFileAtPath(path))) && Boolean(Number(fileManager.isWritableFileAtPath(path)))\n      break\n    case 4:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path)))\n      break\n    case 5:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path))) && Boolean(Number(fileManager.isExecutableFileAtPath(path)))\n      break\n    case 6:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path))) && Boolean(Number(fileManager.isWritableFileAtPath(path)))\n      break\n    case 7:\n      canAccess = Boolean(Number(fileManager.isReadableFileAtPath(path))) && Boolean(Number(fileManager.isWritableFileAtPath(path))) && Boolean(Number(fileManager.isExecutableFileAtPath(path)))\n      break\n  }\n\n  if (!canAccess) {\n    throw new Error('Can\\'t access ' + String(path))\n  }\n}\n\nmodule.exports.appendFileSync = function(file, data, options) {\n  if (!module.exports.existsSync(file)) {\n    return module.exports.writeFileSync(file, data, options)\n  }\n\n  var handle = NSFileHandle.fileHandleForWritingAtPath(file)\n  handle.seekToEndOfFile()\n\n  var encoding = encodingFromOptions(options, 'utf8')\n\n  var nsdata = Buffer.from(data, encoding === 'NSData' || encoding === 'buffer' ? undefined : encoding).toNSData()\n\n  handle.writeData(nsdata)\n}\n\nmodule.exports.chmodSync = function(path, mode) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.setAttributes_ofItemAtPath_error({\n    NSFilePosixPermissions: mode\n  }, path, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value())\n  }\n}\n\nmodule.exports.copyFileSync = function(path, dest, flags) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.copyItemAtPath_toPath_error(path, dest, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, false, err.value())\n  }\n}\n\nmodule.exports.existsSync = function(path) {\n  var fileManager = NSFileManager.defaultManager()\n  return Boolean(Number(fileManager.fileExistsAtPath(path)))\n}\n\nmodule.exports.linkSync = function(existingPath, newPath) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.linkItemAtPath_toPath_error(existingPath, newPath, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(existingPath, undefined, err.value())\n  }\n}\n\nmodule.exports.mkdirSync = function(path, options) {\n  var mode = 0o777\n  var recursive = false\n  if (options && options.mode) {\n    mode = options.mode\n  }\n  if (options && options.recursive) {\n    recursive = options.recursive\n  }\n  if (typeof options === \"number\") {\n    mode = options\n  }\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.createDirectoryAtPath_withIntermediateDirectories_attributes_error(path, recursive, {\n    NSFilePosixPermissions: mode\n  }, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.mkdtempSync = function(path) {\n  function makeid() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 6; i++)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n  }\n  var tempPath = path + makeid()\n  module.exports.mkdirSync(tempPath)\n  return tempPath\n}\n\nmodule.exports.readdirSync = function(path) {\n  var fileManager = NSFileManager.defaultManager()\n  var paths = fileManager.subpathsAtPath(path)\n  var arr = []\n  for (var i = 0; i < paths.length; i++) {\n    arr.push(String(paths[i]))\n  }\n  return arr\n}\n\nmodule.exports.readFileSync = function(path, options) {\n  var encoding = encodingFromOptions(options, 'buffer')\n  var fileManager = NSFileManager.defaultManager()\n  var data = fileManager.contentsAtPath(path)\n  if (!data) {\n    throw fsErrorForPath(path, false)\n  }\n\n  var buffer = Buffer.from(data)\n\n  if (encoding === 'buffer') {\n    return buffer\n  } else if (encoding === 'NSData') {\n    return buffer.toNSData()\n  } else {\n    return buffer.toString(encoding)\n  }\n}\n\nmodule.exports.readlinkSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.destinationOfSymbolicLinkAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value())\n  }\n\n  return String(result)\n}\n\nmodule.exports.realpathSync = function(path) {\n  return String(NSString.stringByResolvingSymlinksInPath(path))\n}\n\nmodule.exports.renameSync = function(oldPath, newPath) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.moveItemAtPath_toPath_error(oldPath, newPath, err)\n\n  var error = err.value()\n\n  if (error !== null) {\n    // if there is already a file, we need to overwrite it\n    if (String(error.domain()) === 'NSCocoaErrorDomain' && Number(error.code()) === 516) {\n      var err2 = MOPointer.alloc().init()\n      fileManager.replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error(NSURL.fileURLWithPath(newPath), NSURL.fileURLWithPath(oldPath), null, NSFileManagerItemReplacementUsingNewMetadataOnly, null, err2)\n      if (err2.value() !== null) {\n        throw fsErrorForPath(oldPath, undefined, err2.value())\n      }\n    } else {\n      throw fsErrorForPath(oldPath, undefined, error)\n    }\n  }\n}\n\nmodule.exports.rmdirSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var isDirectory = module.exports.lstatSync(path).isDirectory()\n  if (!isDirectory) {\n    throw fsError('ENOTDIR', {\n      path: path,\n      syscall: 'rmdir'\n    })\n  }\n  fileManager.removeItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, true, err.value(), 'rmdir')\n  }\n}\n\nfunction parseStat(result) {\n  return {\n    dev: String(result.NSFileDeviceIdentifier),\n    // ino: 48064969, The file system specific \"Inode\" number for the file.\n    mode: result.NSFileType | result.NSFilePosixPermissions,\n    nlink: Number(result.NSFileReferenceCount),\n    uid: String(result.NSFileOwnerAccountID),\n    gid: String(result.NSFileGroupOwnerAccountID),\n    // rdev: 0, A numeric device identifier if the file is considered \"special\".\n    size: Number(result.NSFileSize),\n    // blksize: 4096, The file system block size for i/o operations.\n    // blocks: 8, The number of blocks allocated for this file.\n    atimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    mtimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    ctimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    birthtimeMs: Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000,\n    atime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5), // the 0.5 comes from the node source. Not sure why it's added but in doubt...\n    mtime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    ctime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    birthtime: new Date(Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    isBlockDevice: function() { return result.NSFileType === NSFileTypeBlockSpecial },\n    isCharacterDevice: function() { return result.NSFileType === NSFileTypeCharacterSpecial },\n    isDirectory: function() { return result.NSFileType === NSFileTypeDirectory },\n    isFIFO: function() { return false },\n    isFile: function() { return result.NSFileType === NSFileTypeRegular },\n    isSocket: function() { return result.NSFileType === NSFileTypeSocket },\n    isSymbolicLink: function() { return result.NSFileType === NSFileTypeSymbolicLink },\n  }\n}\n\nmodule.exports.lstatSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.attributesOfItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value())\n  }\n\n  return parseStat(result)\n}\n\n// the only difference with lstat is that we resolve symlinks\n//\n// > lstat() is identical to stat(), except that if pathname is a symbolic\n// > link, then it returns information about the link itself, not the file\n// > that it refers to.\n// http://man7.org/linux/man-pages/man2/lstat.2.html\nmodule.exports.statSync = function(path) {\n  return module.exports.lstatSync(module.exports.realpathSync(path))\n}\n\nmodule.exports.symlinkSync = function(target, path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.createSymbolicLinkAtPath_withDestinationPath_error(path, target, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.truncateSync = function(path, len) {\n  var hFile = NSFileHandle.fileHandleForUpdatingAtPath(sFilePath)\n  hFile.truncateFileAtOffset(len || 0)\n  hFile.closeFile()\n}\n\nmodule.exports.unlinkSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var isDirectory = module.exports.lstatSync(path).isDirectory()\n  if (isDirectory) {\n    throw fsError('EPERM', {\n      path: path,\n      syscall: 'unlink'\n    })\n  }\n  var result = fileManager.removeItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, false, err.value())\n  }\n}\n\nmodule.exports.utimesSync = function(path, aTime, mTime) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.setAttributes_ofItemAtPath_error({\n    NSFileModificationDate: aTime\n  }, path, err)\n\n  if (err.value() !== null) {\n    throw fsErrorForPath(path, undefined, err.value())\n  }\n}\n\nmodule.exports.writeFileSync = function(path, data, options) {\n  var encoding = encodingFromOptions(options, 'utf8')\n\n  var nsdata = Buffer.from(\n    data, encoding === 'NSData' || encoding === 'buffer' ? undefined : encoding\n  ).toNSData()\n\n  nsdata.writeToFile_atomically(path, true)\n}\n","import sketch from 'sketch';\nimport {getLastPart} from './helpers';\nimport fs from '@skpm/fs';\nimport util from 'util';\n\n\nexport default function() {\n  const doc = sketch.fromNative(context.document);\n  const layers = doc.getSharedLayerStyles();\n  const textLayers = doc.getSharedTextStyles();\n  const state = {};\n\n  // Get colors\n  function getColors(layers) {\n    let colors = [];\n    Object.values(layers).forEach(($layer, i) => {\n      const color = {};\n      // Name\n      color.name = getLastPart($layer.name);\n      const hex = $layer.style.fills[0].color;\n      // Clean hex\n      color.hex = hex.substr(0, 7);\n      // Add color\n      colors[i] = color;\n    });\n    return colors;\n  }\n  // Get font family\n  function getFontFamilies(layers) {\n    const names = layers.map($layer => $layer.style.sketchObject.textStyle().attributes().NSFont.familyName());\n    const fontFamilies = names.map((name) => (\n        {\n          name: String(name),\n          value: String(name).replace(/\\s+/g, '-').toLowerCase()\n        }\n      )\n    );\n    // Remove duplicates\n    const cleanFamilies = fontFamilies.map(e => e['name'])\n      .map((e, i, final) => final.indexOf(e) === i && i)\n      .filter(e => fontFamilies[e]).map(e => fontFamilies[e]);\n    return cleanFamilies;\n  }\n  // Get Font sizes\n  function getFontSizes(layers) {\n    let fontSizes = {}\n    const sizes = layers.map($layer => $layer.style.sketchObject.textStyle().attributes().NSFont.pointSize());\n    Object.values(sizes).forEach(($size) => {\n      // Set empty text for each size\n      fontSizes[$size] = '';\n    });\n    return fontSizes;\n  }\n\n\n  // Set state\n  state.colors = getColors(layers);\n  state.fontSizes = getFontSizes(textLayers);\n  state.fontFamilies = getFontFamilies(textLayers);\n\n  // Save File for testing\n  // function saveFile(theme) {\n  //   const save = NSSavePanel.savePanel();\n  //   save.setNameFieldStringValue(\"theme.js\");\n  //   save.setAllowedFileTypes([\"js\"]);\n  //   save.setAllowsOtherFileTypes(false);\n  //   save.setExtensionHidden(true);\n  //\n  //   if (save.runModal()) {\n  //     const path = save.URL().path();\n  //     fs.writeFileSync(path, `const theme = ${util.inspect(theme, { depth: null })}`, 'utf8');\n  //     sketch.UI.message(\"Theme exported\");\n  //   }\n  // }\n  // saveFile(state);\n\n  return state;\n}\n","export function getLastPart(name){\n  if (name.indexOf('/') !== -1 ) {\n    name = name.substr(name.lastIndexOf('/') + 1);\n  }\n  return name.toLowerCase();\n}","module.exports = require(\"buffer\");","module.exports = require(\"sketch\");","module.exports = require(\"util\");"],"sourceRoot":""}